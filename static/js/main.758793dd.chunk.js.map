{"version":3,"sources":["Components/Header.js","axios.js","Components/StatsBox.js","Components/Stats.js","Components/Map.js","util.js","Components/Table.js","Components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["Header","countries","country","onCountryChange","className","src","alt","FormControl","Select","variant","value","onChange","MenuItem","map","iso3","instance","axios","create","baseURL","StatsBox","title","today","total","color","useState","lastTotal","setLastTotal","lastToday","setLastToday","Grid","item","xs","sm","Card","style","borderColor","CardContent","Typography","start","end","formattingFn","numeral","format","duration","onEnd","Stats","countryInfo","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths","colors","container","spacing","Map","data","countriesData","MapContainer","center","zoom","TileLayer","url","attribution","i","Circle","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","Table","slice","sort","a","b","casesPerOneMillion","onClick","target","options","legend","display","labels","elements","point","maintainAspectRatio","tooltips","mode","intersect","scales","xAxes","gridLines","type","time","tooltipFormat","yAxes","ticks","callback","values","Chart","length","datasets","label","backgroundColor","App","setCountriesData","setCountry","setCountryInfo","historicalData","setHistoricalData","useEffect","get","then","res","fetchCountries","fetchCountryInfo","timeline","Object","keys","date","x","y","catch","error","fetchHistoricalData","e","console","log","md","lg","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.758793dd.chunk.js","sourcesContent":["import React from 'react';\nimport { FormControl, MenuItem, Select } from '@material-ui/core';\nimport './Header.css';\n\nconst Header = ({countries, country, onCountryChange}) => (\n  <div className=\"header\">\n    <img src=\"covid.png\" alt=\"\"/>\n    <FormControl className=\"header__dropdown\">\n      <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n        <MenuItem value=\"all\">Worldwide</MenuItem>\n        {countries?.map(({country, iso3}) => (<MenuItem key={iso3} value={iso3}>{country}</MenuItem>))}\n      </Select>\n    </FormControl>\n  </div>\n)\n\nexport default Header;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://disease.sh/v3/covid-19'\n});\n\nexport default instance;","import { Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport numeral from 'numeral';\nimport React, { useState } from 'react'\nimport CountUp from 'react-countup';\nimport './StatsBox.css';\n\nconst StatsBox = ({title, today, total, color}) => {\n  const [lastTotal, setLastTotal] = useState(0);\n  const [lastToday, setLastToday] = useState(0);\n  \n  return (\n    <Grid item xs={12} sm={4} className=\"statsBox\">\n      <Card className=\"statsBox__card\" style={{borderColor: color}}>\n        <CardContent>\n          \n          <Typography className=\"statsBox__title\" color=\"textSecondary\" >\n            {title}\n          </Typography>\n\n          <h2 className=\"statsBox__today\" style={{color: color}}>\n            {today != null && <CountUp start={lastToday} end={today} formattingFn={value => numeral(value).format(\"+0.[0]a\")} duration={2} onEnd={() => setLastToday(today)} />}\n          </h2>\n\n          <Typography className=\"statsBox__total\" color=\"textSecondary\">\n            {total != null && <CountUp start={lastTotal} end={total} formattingFn={value => numeral(value).format(\"0.[0]a\")} duration={2} onEnd={() => setLastTotal(total)} />} Total\n          </Typography>\n\n        </CardContent>\n      </Card>\n    </Grid>\n  )\n}\n\nexport default StatsBox\n","import { Grid } from '@material-ui/core'\nimport React from 'react'\nimport './Stats.css'\nimport StatsBox from './StatsBox'\n\nconst Stats = ({countryInfo: {todayCases, cases, todayRecovered, recovered, todayDeaths, deaths}, colors}) => {\n  return (\n    <Grid container spacing={3} className=\"stats\">\n\n      <StatsBox color={colors.cases} title=\"Cases\" today={todayCases} total={cases} />\n      <StatsBox color={colors.recovered} title=\"Recovered\" today={todayRecovered} total={recovered} />\n      <StatsBox color={colors.deaths} title=\"Deaths\" today={todayDeaths} total={deaths} />\n      \n    </Grid>\n  )\n}\n\nexport default Stats\n","import React from 'react';\nimport './Map.css';\nimport {MapContainer, TileLayer} from 'react-leaflet';\nimport { showDataOnMap } from '../util';\n\nconst Map = ({countriesData}) => {\n  return (\n    <div className=\"map\">\n      <MapContainer center={[46,2]} zoom={3}>\n        <TileLayer \n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countriesData)}\n      </MapContainer>\n    </div>\n  )\n}\n\nexport default Map\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nexport const sort = (data) => (\n  data.slice().sort((a, b) => 2*(a.cases < b.cases)-1)\n);\n\nexport const showDataOnMap = (data) => (\n  data.map((country, i) => (\n    <Circle\n      key={i}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color=\"#cc1034\"\n      fillColor=\"#cc1034\"\n      radius={Math.sqrt(country['cases']) * 400}\n    >\n      <Popup>\n        <div className=\"map__popup\">\n          <div className=\"map__name\"><strong>{country.country}</strong></div>\n          <div>Cases: {numeral(country.cases).format(\"0,0\")}</div>\n          <div>Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n          <div>Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n        </div>\n      </Popup>\n\n    </Circle>\n  ))\n)","import React from 'react'\nimport './Table.css'\nimport numeral from 'numeral';\n\nconst Table = ({countriesData, onCountryChange}) => (\n  <div className=\"table\">\n    <h3>Cases per Millions per Country</h3>\n    <table>\n      <tbody>\n        {countriesData?.slice().sort((a,b) => b.casesPerOneMillion-a.casesPerOneMillion).map(({country, casesPerOneMillion, countryInfo: {iso3}}, i) => (\n          <tr key={i}>\n            <td onClick={() => onCountryChange({target: {value: iso3}})}>{country}</td>\n            <td><strong>{numeral(casesPerOneMillion).format(\"0.[0]a\")}</strong></td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n)\n\nexport default Table\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport './Chart.css';\nimport numeral from 'numeral';\n\nconst options = {\n  legend: {\n    display: true,\n    labels: {\n\n    }\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          display: false\n        },\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\"\n        }\n      }\n    ],\n    yAxes: [\n      {\n        ticks: {\n          callback: (value, i, values) => numeral(value).format(\"0a\")\n        }\n      }\n    ]\n  }\n}\n\nconst Chart = ({data, colors}) => {\n  return (\n    <div className=\"chart\">\n      {data?.cases?.length ? (\n        <Line \n          data={{\n            datasets: [\n              {\n                label: \"Cases\",\n                backgroundColor: \"transparent\",\n                borderColor: colors.cases,\n                data: data.cases\n              },\n              {\n                label: \"Recovered\",\n                backgroundColor: \"transparent\",\n                borderColor: colors.recovered,\n                data: data.recovered\n              },\n              {\n                label: \"Deaths\",\n                backgroundColor: \"transparent\",\n                borderColor: colors.deaths,\n                data: data.deaths\n              }\n            ]\n          }}\n          options={options}\n        />\n      ) : <><br/><center>No historical data available</center></>}\n    </div>\n  )\n}\n\nexport default Chart\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport axios from './axios';\nimport Stats from './Components/Stats';\nimport Map from './Components/Map';\nimport { Card, CardContent, Grid } from '@material-ui/core';\nimport Table from './Components/Table';\nimport Chart from './Components/Chart';\n\nconst colors = {\n  cases: \"#0000dd\",\n  recovered: \"#00dd00\",\n  deaths: \"#dd0000\"\n}\n\nfunction App() {\n  const [countriesData, setCountriesData] = useState([]);\n  const [country, setCountry] = useState(\"all\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [historicalData, setHistoricalData] = useState();\n\n  const buildChartData = (data) => ({\n    cases: Object.keys(data['cases']).map(date => ({\n      x: date, \n      y: data['cases'][date]\n    })),\n    recovered: Object.keys(data['recovered']).map(date => ({\n      x: date, \n      y: data['recovered'][date]\n    })),\n    deaths: Object.keys(data['deaths']).map(date => ({\n      x: date, \n      y: data['deaths'][date]\n    }))\n  })\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      await axios.get('/countries')\n      .then(res => {setCountriesData(res.data)})\n    }\n    fetchCountries();\n    const fetchCountryInfo =  async () => {\n      await axios.get(\"/all\").then(res => setCountryInfo(res.data));\n    }\n    fetchCountryInfo();\n  }, []);\n\n  useEffect(() => {\n    const fetchHistoricalData = async () => {\n      await axios.get(`/historical/${country}?lastdays=all`)\n        .then(res => setHistoricalData(buildChartData(country==='all' ? res.data : res.data.timeline)))\n        .catch(error => setHistoricalData(null))\n    }\n    fetchHistoricalData();\n  }, [country])\n\n  const onCountryChange = async e => {\n    console.log(e.target.value)\n    setCountry(e.target.value);\n    const url = (e.target.value === \"all\") \n      ? \"/all\" \n      : `/countries/${e.target.value}`;\n    await axios.get(url).then(res => {\n      setCountryInfo(res.data);\n    });\n\n  }\n\n  return (\n    <Grid container spacing={3} className=\"app\">\n\n      <Grid item xs={12} md={7} lg={8} className=\"app__left\">\n        <Header countries={countriesData.map(({country, countryInfo: {iso3}}) => ({country, iso3})).filter(({iso3}) => iso3)} country={country} onCountryChange={onCountryChange}/>\n        <Stats countryInfo={countryInfo} colors={colors} />\n        <Chart data={historicalData} colors={colors}/>\n      </Grid>\n\n      <Grid item xs={12} md={5} lg={4} className=\"app__right\">\n        <Card>\n          <CardContent className=\"app__rightCard\">\n            <Table countriesData={countriesData} onCountryChange={onCountryChange}/>\n            <Map countriesData={countriesData}/>\n          </CardContent>\n        </Card>\n      </Grid>\n\n    </Grid>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'leaflet/dist/leaflet.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}